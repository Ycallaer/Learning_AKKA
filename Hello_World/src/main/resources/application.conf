akka.actor.deployment {
  /random-router-pool {
    router = "random-pool"
    nr-of-instances = 3
  }
}

//MembersService {
//  akka {
//    actor {
//      provider = "akka.remote.RemoteActorRefProvider"
//      #provider = cluster
//    }
//    remote {
//      enabled-transports=["akka.remote.classic.netty.tcp"]
//      netty.tcp {
//        hostname = "127.0.0.1"
//        port = 5150
//      }
//    }
//  }
//}

//MembersServiceLookup {
//  akka {
//    actor {
//      provider = "akka.remote.RemoteActorRefProvider"
//    }
//    remote {
//      enabled-transports=["akka.remote.netty.tcp"]
//      netty.tcp {
//        hostname = "127.0.0.1"
//        port = 2553
//      }
//    }
//  }
//}


###############################
# Config for exercise section 5
###############################
MembersService {
  akka {
    actor {
      # provider=remote is possible, but prefer cluster
      provider = cluster
      # This is needed to send a message between the actors
      allow-java-serialization = on
    }
    remote {
      artery {
        transport = tcp # See Selecting a transport below
        canonical.hostname = "127.0.0.1"
        canonical.port = 25521
      }
    }
  }
}

MembersServiceLookup {
  akka {
    actor {
      # provider=remote is possible, but prefer cluster
      provider = cluster
      # This is needed to send a message between the actors
      allow-java-serialization = on
    }
    remote {
      artery {
        transport = tcp # See Selecting a transport below
        canonical.hostname = "127.0.0.1"
        canonical.port = 25522
      }
    }
  }
}

########################################
# Needed for actor persistence exercises
########################################
#akka.persistence.journal.plugin="akka.persistence.journal.inmem"
akka.persistence.journal.plugin="akka.persistence.journal.leveldb"
akka.persistence.journal.leveldb.dir="target/example/journal"

akka.persistence.snapshot-store.plugin="akka.persistence.snapshot-store.local"

akka.persistence.snapshot-store.local.dir="target/example/snapshots"
akka.persistence.journal.leveldb.native=off
//This was needed for exercise 4.3, see https://doc.akka.io/docs/akka/current/serialization.html
akka.actor.allow-java-serialization = on

#############################
# Section 5.2
#############################
Frontend{
  akka {
    actor {
      # provider=remote is possible, but prefer cluster
      provider = "akka.cluster.ClusterActorRefProvider"
      # This is needed to send a message between the actors
      allow-java-serialization = on
    }
    remote {
      log-remote-lifecycle-events=off
      artery {
        transport = tcp # See Selecting a transport below
        canonical.hostname = "127.0.0.1"
        canonical.port = 2551
      }
    }

    cluster {
      roles = ["frontend"]
      seed-nodes = ["akka://ClusterSystem@127.0.0.1:2551"]
      auto-down-unreachable-after = 10s
    }
  }
}

Backend{
  akka {
    actor {
      # provider=remote is possible, but prefer cluster
      provider = "akka.cluster.ClusterActorRefProvider"
      # This is needed to send a message between the actors
      allow-java-serialization = on
    }
    remote {
      log-remote-lifecycle-events=off
      artery {
        transport = tcp # See Selecting a transport below
        canonical.hostname = "127.0.0.1"
        canonical.port = 0
      }
    }
    cluster {
      roles = ["backend"]
      seed-nodes = ["akka://ClusterSystem@127.0.0.1:2551"]
      auto-down-unreachable-after = 10s
    }
  }
}